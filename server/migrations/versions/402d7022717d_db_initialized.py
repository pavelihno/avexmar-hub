"""DB initialized

Revision ID: 402d7022717d
Revises: 
Create Date: 2025-09-12 13:44:42.031138

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '402d7022717d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('aircrafts',
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('type')
    )
    op.create_table('consent_docs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('public_offer', 'pd_policy', 'pd_agreement', name='consent_doc_type'), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('hash_sha256', sa.String(length=64), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('type', 'version', name='uix_consent_doc_type_version')
    )
    op.create_table('countries',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('name_en', sa.String(), nullable=True),
    sa.Column('code_a2', sa.String(length=2), nullable=False),
    sa.Column('code_a3', sa.String(length=3), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code_a2'),
    sa.UniqueConstraint('code_a3')
    )
    op.create_table('discounts',
    sa.Column('discount_name', sa.String(), nullable=False),
    sa.Column('discount_type', sa.Enum('round_trip', 'infant', 'child', name='discount_type'), nullable=False),
    sa.Column('percentage_value', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discount_name')
    )
    op.create_table('fees',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('application', sa.Enum('booking', 'cancellation', name='fee_application'), nullable=False),
    sa.Column('application_term', sa.Enum('none', 'before_24h', 'within_24h', 'after_departure', name='fee_term'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('tariffs',
    sa.Column('seat_class', sa.Enum('economy', 'business', name='seat_class'), nullable=False),
    sa.Column('order_number', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('currency', sa.Enum('rub', name='currency'), nullable=False),
    sa.Column('conditions', sa.String(), nullable=True),
    sa.Column('baggage', sa.Integer(), nullable=False),
    sa.Column('hand_luggage', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('timezones',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'standard', name='user_role'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('totp_secret', sa.String(), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('is_locked', sa.Boolean(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('airlines',
    sa.Column('iata_code', sa.String(length=2), nullable=False),
    sa.Column('icao_code', sa.String(length=3), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('iata_code'),
    sa.UniqueConstraint('icao_code')
    )
    op.create_table('airports',
    sa.Column('iata_code', sa.String(length=3), nullable=False),
    sa.Column('icao_code', sa.String(length=4), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('city_name', sa.String(), nullable=False),
    sa.Column('city_name_en', sa.String(), nullable=True),
    sa.Column('city_code', sa.String(), nullable=False),
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('timezone_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['timezone_id'], ['timezones.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('iata_code'),
    sa.UniqueConstraint('icao_code')
    )
    op.create_table('bookings',
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('access_token', sa.UUID(), nullable=True),
    sa.Column('booking_number', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('created', 'passengers_added', 'confirmed', 'payment_pending', 'payment_confirmed', 'payment_failed', 'completed', 'expired', 'cancelled', name='booking_status'), nullable=False),
    sa.Column('seats_number', sa.Integer(), nullable=False),
    sa.Column('status_history', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False),
    sa.Column('buyer_last_name', sa.String(), nullable=True),
    sa.Column('buyer_first_name', sa.String(), nullable=True),
    sa.Column('email_address', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('currency', sa.Enum('rub', name='currency'), nullable=False),
    sa.Column('fare_price', sa.Float(), nullable=False),
    sa.Column('fees', sa.Float(), nullable=False),
    sa.Column('total_discounts', sa.Float(), nullable=False),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('passenger_counts', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('access_token')
    )
    with op.batch_alter_table('bookings', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_bookings_booking_number'), ['booking_number'], unique=True)
        batch_op.create_index(batch_op.f('ix_bookings_public_id'), ['public_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_bookings_user_id'), ['user_id'], unique=False)

    op.create_table('passengers',
    sa.Column('owner_user_id', sa.Integer(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('patronymic_name', sa.String(), nullable=True),
    sa.Column('gender', sa.Enum('м', 'ж', name='gender'), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('document_type', sa.Enum('passport', 'foreign_passport', 'international_passport', 'birth_certificate', name='document_type'), nullable=False),
    sa.Column('document_number', sa.String(), nullable=False),
    sa.Column('document_expiry_date', sa.Date(), nullable=True),
    sa.Column('citizenship_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['citizenship_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('passengers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_passengers_owner_user_id'), ['owner_user_id'], unique=False)
        batch_op.create_index('ux_passenger_by_owner', ['owner_user_id', 'first_name', 'last_name', 'birth_date', 'document_type', 'document_number'], unique=True, postgresql_where=sa.text('owner_user_id IS NOT NULL'))

    op.create_table('password_reset_tokens',
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('used', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('password_reset_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_token'), ['token'], unique=True)

    op.create_table('booking_holds',
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('booking_holds', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_booking_holds_booking_id'), ['booking_id'], unique=True)

    op.create_table('booking_passengers',
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('passenger_id', sa.Integer(), nullable=False),
    sa.Column('category', sa.Enum('adult', 'child', 'infant', 'infant_seat', name='passenger_category'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['passenger_id'], ['passengers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('booking_id', 'passenger_id', name='uix_booking_passenger_unique')
    )
    op.create_table('consent_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('public_offer_acceptance', 'pd_agreement_acceptance', name='consent_event_type'), nullable=False),
    sa.Column('granter_user_id', sa.Integer(), nullable=True),
    sa.Column('booking_id', sa.Integer(), nullable=True),
    sa.Column('doc_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.Enum('agree', 'withdraw', name='consent_action'), nullable=False),
    sa.Column('ip', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('device_fingerprint', sa.String(length=128), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['doc_id'], ['consent_docs.id'], ),
    sa.ForeignKeyConstraint(['granter_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payments',
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('payment_method', sa.Enum('yookassa', name='payment_method'), nullable=False),
    sa.Column('payment_status', sa.Enum('pending', 'waiting_for_capture', 'succeeded', 'canceled', name='payment_status'), nullable=False),
    sa.Column('payment_type', sa.Enum('payment', 'invoice', 'refund', name='payment_type'), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.Enum('rub', name='currency'), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.Column('provider_payment_id', sa.String(), nullable=True),
    sa.Column('confirmation_token', sa.String(), nullable=True),
    sa.Column('is_paid', sa.Boolean(), nullable=False),
    sa.Column('status_history', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False),
    sa.Column('last_webhook', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('provider_payment_id')
    )
    op.create_table('routes',
    sa.Column('origin_airport_id', sa.Integer(), nullable=False),
    sa.Column('destination_airport_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['destination_airport_id'], ['airports.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['origin_airport_id'], ['airports.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('origin_airport_id', 'destination_airport_id', name='uix_origin_destination_airport')
    )
    op.create_table('consent_event_subjects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.Column('consent_event_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['consent_event_id'], ['consent_events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['subject_id'], ['passengers.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('consent_event_id', 'subject_id', name='uix_consent_event_subject')
    )
    op.create_table('flights',
    sa.Column('flight_number', sa.String(), nullable=False),
    sa.Column('route_id', sa.Integer(), nullable=False),
    sa.Column('airline_id', sa.Integer(), nullable=False),
    sa.Column('aircraft_id', sa.Integer(), nullable=True),
    sa.Column('note', sa.String(), nullable=True),
    sa.Column('scheduled_departure', sa.Date(), nullable=False),
    sa.Column('scheduled_departure_time', sa.Time(), nullable=True),
    sa.Column('scheduled_arrival', sa.Date(), nullable=False),
    sa.Column('scheduled_arrival_time', sa.Time(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['aircraft_id'], ['aircrafts.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['airline_id'], ['airlines.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('flight_number', 'airline_id', 'route_id', 'scheduled_departure', name='uix_flight_number_airline_route_departure')
    )
    op.create_table('booking_flights',
    sa.Column('booking_id', sa.Integer(), nullable=False),
    sa.Column('flight_id', sa.Integer(), nullable=False),
    sa.Column('tariff_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ),
    sa.ForeignKeyConstraint(['tariff_id'], ['tariffs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('booking_id', 'flight_id', name='uix_booking_flight_unique')
    )
    op.create_table('flight_tariffs',
    sa.Column('flight_id', sa.Integer(), nullable=False),
    sa.Column('tariff_id', sa.Integer(), nullable=False),
    sa.Column('seats_number', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tariff_id'], ['tariffs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('flight_id', 'tariff_id', name='uix_flight_tariff_flight_tariff')
    )
    op.create_table('tickets',
    sa.Column('ticket_number', sa.String(length=20), nullable=False),
    sa.Column('flight_id', sa.Integer(), nullable=False),
    sa.Column('booking_id', sa.Integer(), nullable=True),
    sa.Column('passenger_id', sa.Integer(), nullable=True),
    sa.Column('discount_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['discount_id'], ['discounts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['flight_id'], ['flights.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['passenger_id'], ['passengers.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('ticket_number')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tickets')
    op.drop_table('flight_tariffs')
    op.drop_table('booking_flights')
    op.drop_table('flights')
    op.drop_table('consent_event_subjects')
    op.drop_table('routes')
    op.drop_table('payments')
    op.drop_table('consent_events')
    op.drop_table('booking_passengers')
    with op.batch_alter_table('booking_holds', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_booking_holds_booking_id'))

    op.drop_table('booking_holds')
    with op.batch_alter_table('password_reset_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_token'))

    op.drop_table('password_reset_tokens')
    with op.batch_alter_table('passengers', schema=None) as batch_op:
        batch_op.drop_index('ux_passenger_by_owner', postgresql_where=sa.text('owner_user_id IS NOT NULL'))
        batch_op.drop_index(batch_op.f('ix_passengers_owner_user_id'))

    op.drop_table('passengers')
    with op.batch_alter_table('bookings', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_bookings_user_id'))
        batch_op.drop_index(batch_op.f('ix_bookings_public_id'))
        batch_op.drop_index(batch_op.f('ix_bookings_booking_number'))

    op.drop_table('bookings')
    op.drop_table('airports')
    op.drop_table('airlines')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    op.drop_table('timezones')
    op.drop_table('tariffs')
    op.drop_table('fees')
    op.drop_table('discounts')
    op.drop_table('countries')
    op.drop_table('consent_docs')
    op.drop_table('aircrafts')
    # ### end Alembic commands ###
